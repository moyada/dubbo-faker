<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.moyada.faker.manager.dao.FakerDAO">

	<resultMap id="appInfoDO" type="cn.moyada.faker.manager.domain.AppInfoDO">
		<id column="app_id" property="appId"/>
		<result column="app_name" property="appName"/>
		<result column="group_id" property="groupId"/>
		<result column="artifact_id" property="artifactId"/>
		<result column="version" property="version"/>
		<result column="url" property="url"/>
	</resultMap>

	<resultMap id="methodInvokeDO" type="cn.moyada.faker.manager.domain.MethodInvokeDO">
		<id column="id" property="id"/>
		<id column="app_id" property="appId"/>
		<result column="app_name" property="appName"/>
		<result column="class_name" property="className"/>
		<result column="method_name" property="methodName"/>
		<result column="param_type" property="paramType"/>
		<result column="return_type" property="returnType"/>
		<result column="expression" property="expression"/>
	</resultMap>

	<resultMap id="logDO" type="cn.moyada.faker.manager.domain.LogDO">
		<id column="id" property="id"/>
		<result column="real_param" property="realParam"/>
		<result column="code" property="code"/>
		<result column="result" property="result"/>
		<result column="message" property="message"/>
		<result column="spend_time" property="spendTime"/>
		<result column="invoke_time" property="invokeTime"/>
	</resultMap>

	<select id="findAllApp" resultMap="appInfoDO">
		SELECT `app_id`, `app_name`, `group_id`, `artifact_id`, `version`, `url`
		FROM `app_info`
	</select>

	<select id="findAppById" resultMap="appInfoDO">
		SELECT `app_id`, `app_name`, `group_id`, `artifact_id`, `version`, `url`, `dependencies`
		FROM `app_info`
		WHERE app_id = #{appId}
		LIMIT 1
	</select>

	<select id="findDependencyById" resultMap="appInfoDO">
		SELECT `name` appName, `group_id`, `artifact_id`, `version`, `url`
		FROM `dependency`
		WHERE id IN
		<foreach collection="ids" item="id" open="(" close=")" separator=",">
			#{id}
		</foreach>
	</select>

	<update id="updateUrl">
		UPDATE app_info SET url = #{url} WHERE group_id = #{groupId} and artifact_id = #{artifactId}
	</update>

	<insert id="saveInvokeInfo">
		INSERT INTO `method_invoke`
		(`app_id`, `app_name`, `class_name`, `method_name`, `param_type`, `return_type`, `expression`)
		VALUE
		(#{appId}, #{appName}, #{className}, #{methodName}, #{paramType}, #{returnType}, #{expression});
	</insert>

	<select id="findAll" resultMap="methodInvokeDO">
		SELECT `id`, `app_id`, `app_name`, `class_name`, `method_name`, `param_type`, `return_type`, `expression`
		FROM `method_invoke`;
	</select>

	<select id="findInvokeInfoById" resultMap="methodInvokeDO">
		SELECT `id`, `app_id`, `app_name`, `class_name`, `method_name`, `param_type`, `return_type`, `expression`
		FROM `method_invoke`
		WHERE id = #{id};
	</select>

	<select id="countParamByType" resultType="int">
		SELECT COUNT(*)
		FROM `invoke_param`
		WHERE app_id = #{appId}
		AND `type` = #{type}
	</select>

	<select id="findParamByType" resultType="String">
		SELECT `param_value`
		FROM `invoke_param`
		WHERE app_id = #{appId}
		AND `type` = #{type}
		LIMIT ${limit}, ${size}
	</select>

	<insert id="saveLog">
		INSERT INTO `faker_log`
		(`faker_id`, `invoke_id`, `real_param`, `code`, `result`, `message`, `spend_time`, `invoke_time`)
		VALUE
		(#{fakerId}, #{invokeId}, #{realParam}, #{code}, #{result}, #{message}, #{spendTime}, #{invokeTime});
	</insert>

	<insert id="saveLogList">
		INSERT INTO `faker_log`
		(`faker_id`, `invoke_id`, `real_param`, `code`, `result`, `message`, `spend_time`, `invoke_time`)
		<foreach collection="list" item="item" separator="," open="VALUES">
			(
			#{item.fakerId}, #{item.invokeId}, #{item.realParam}, #{item.code},
	  		#{item.result}, #{item.message}, #{item.spendTime}, #{item.invokeTime}
			)
		</foreach>;
	</insert>

	<select id="findClassByApp" resultType="String">
		SELECT `class_name`
		FROM `method_invoke`
		WHERE `app_id` = #{appId}
		GROUP BY `class_name`
	</select>

	<select id="findMethodByClass" resultMap="methodInvokeDO">
		SELECT `id`, `method_name`, `param_type`, `return_type`, `expression`
		FROM `method_invoke`
		WHERE `class_name` = #{className}
	</select>

	<select id="countMethodByFakerId" resultType="int">
		SELECT count(*)
		FROM `faker_log`
		WHERE `faker_id` = #{fakerId}
	</select>

	<select id="findMethodByFakerId" resultMap="logDO">
		SELECT a.`id`, `real_param`, `code`, `result`, `message`, `spend_time`, `invoke_time`
		FROM `faker_log` a,
		(
			SELECT id
			FROM `faker_log`
			WHERE `faker_id` = #{fakerId}
			ORDER BY `code` DESC, `spend_time` DESC
			LIMIT ${offset}, ${pageSize}
		) b
		WHERE a.`id` = b.`id`
	</select>
</mapper>